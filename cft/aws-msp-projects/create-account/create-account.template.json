{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create Account Resources",
    "Parameters": {
        "CICDBucket": {
            "Description": "CI/CD Functions Bucket",
            "Type": "String",
            "Default": "enabling-services-ci-cd"
        },
        "DewfordCreateAccountVersion": {
            "Type": "String",
            "Default": "latest"
        },
        "DewfordDescribeCreateAccountStatusVersion": {
            "Type": "String",
            "Default": "latest"
        },
        "DewfordExecuteStepFunctionVersion": {
            "Type": "String",
            "Default": "latest"
        },
        "CreateAccountWrapperVersion": {
            "Type": "String",
            "Default": "latest"
        }
    },
    "Resources": {
        "FunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess"
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": {
                                "Effect": "Allow",
                                "Action": "sts:AssumeRole",
                                "Resource": "*"
                            }
                        },
                        "PolicyName": "AssumeRole"
                    }
                ]
            }
        },
        "DewfordCreateAccount": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CICDBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "aws-msp-dewford/DewfordCreateAccount/${DewfordCreateAccountVersion}/function.zip"
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "DewfordDescribeCreateAccountStatus": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CICDBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "aws-msp-dewford/DewfordDescribeCreateAccountStatus/${DewfordDescribeCreateAccountStatusVersion}/function.zip"
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "DewfordExecuteStepFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CICDBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "aws-msp-dewford/DewfordExecuteStepFunction/${DewfordExecuteStepFunctionVersion}/function.zip"
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "CreateAccountWrapper": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "FunctionName": {
                            "Ref": "DewfordExecuteStepFunction"
                        },
                        "StateMachine": {
                            "Ref": "StateMachine"
                        }
                    }
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "CICDBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "aws-msp-projects/create-account/${CreateAccountWrapperVersion}/function.zip"
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "CreateRole": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const AWS = require('aws-sdk');",
                                "const sts = new AWS.STS();",
                                "let iam = null;",
                                "exports.handler = (event, context, callback) => {",
                                "    const accountId = event.local.account.AccountId;",
                                "    Promise.resolve()",
                                "        .then(() => {",
                                "            return sts.assumeRole({",
                                "                DurationSeconds: 3600,",
                                "                RoleArn: `arn:aws:iam::${accountId}:role/OrganizationAccountAccessRole`,",
                                "                RoleSessionName: `create`,",
                                "            }).promise()",
                                "        })",
                                "        .then((data) => {",
                                "            iam = new AWS.IAM({",
                                "                accessKeyId: data.Credentials.AccessKeyId,",
                                "                secretAccessKey: data.Credentials.SecretAccessKey,",
                                "                sessionToken: data.Credentials.SessionToken,",
                                "            });",
                                "            return iam.createRole({",
                                "                AssumeRolePolicyDocument: JSON.stringify({",
                                "                    Version: '2012-10-17',",
                                "                    Statement: [",
                                "                        {",
                                "                            Effect: 'Allow',",
                                "                            Principal: {",
                                "                                AWS: 'arn:aws:iam::848194084705:root'",
                                "                            },",
                                "                            Action: 'sts:AssumeRole',",
                                "                            Condition: {",
                                "                                StringEquals: {",
                                "                                    'sts:ExternalId': 'ecruteak'",
                                "                                }",
                                "                            }",
                                "                        }",
                                "                    ]",
                                "                }),",
                                "                RoleName: 'DatacomCICD'",
                                "            }).promise()",
                                "        }).then(() => {",
                                "            return iam.attachRolePolicy({",
                                "                PolicyArn: 'arn:aws:iam::aws:policy/AdministratorAccess',",
                                "                RoleName: 'DatacomCICD'",
                                "            }).promise()",
                                "        }).then(() => {",
                                "            callback(null);",
                                "        }).catch((err) => {",
                                "            callback(err);",
                                "        });",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "CfnSignal": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "exports.handler = (event, context) => {",
                                "  response.send(event, context, response.SUCCESS, event.local.account);",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "Translate": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "exports.handler = (event, context) => {",
                                "  console.log(JSON.stringify(event));",
                                "  let response = null;",
                                "  for (let property in event.data) { response = event.data[property] };",
                                "  console.log(response);",
                                "  response.send(event, context, response.SUCCESS, response);",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs6.10",
                "Timeout": 5
            }
        },
        "StateMachineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": {
                                    "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                                }
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Sub": "${AWS::StackName}"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "DefinitionString": {
                    "Fn::Sub": "{\n    \"Comment\": \"Deploy Stack Machine\",\n    \"StartAt\": \"CreateAccount\",\n    \"States\": {\n        \"CreateAccount\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"${DewfordCreateAccount.Arn}\",\n            \"Next\": \"DescribeCreateAccountStatus\",\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"Next\": \"Fail\"\n                }\n            ],\n            \"ResultPath\": \"$.local.account\"\n        },\n        \"DescribeCreateAccountStatus\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"${DewfordDescribeCreateAccountStatus.Arn}\",\n            \"Next\": \"IsCreateAccountComplete\",\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"Next\": \"Fail\"\n                }\n            ],\n            \"InputPath\": \"$.local.account\",\n            \"ResultPath\": \"$.local.account\"\n        },\n        \"IsCreateAccountComplete\": {\n            \"Type\": \"Choice\",\n            \"Choices\": [\n                {\n                    \"Variable\": \"$.local.account.State\",\n                    \"StringEquals\": \"SUCCEEDED\",\n                    \"Next\": \"CreateRole\"\n                },\n                {\n                    \"Variable\": \"$.local.account.State\",\n                    \"StringEquals\": \"FAILED\",\n                    \"Next\": \"Fail\"\n                }\n            ],\n            \"Default\": \"WaitForCreateAccountComplete\"\n        },\n        \"WaitForCreateAccountComplete\": {\n            \"Type\": \"Wait\",\n            \"Seconds\": 5,\n            \"Next\": \"DescribeCreateAccountStatus\"\n        },\n        \"CreateRole\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"${CreateRole.Arn}\",\n            \"Next\": \"CfnSignal\",\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"Next\": \"Fail\"\n                }\n            ]\n        },\n        \"CfnSignal\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"${CfnSignal.Arn}\",\n            \"Next\": \"Succeed\",\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"Next\": \"Fail\"\n                }\n            ]\n        },\n        \"Succeed\": {\n            \"Type\": \"Succeed\"\n        },\n        \"Fail\": {\n            \"Type\": \"Fail\"\n        }\n    }\n}"
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "CreateAccountWrapper": {
            "Description": "CreateAccountWrapper",
            "Value": {
                "Fn::GetAtt": [
                    "CreateAccountWrapper",
                    "Arn"
                ]
            },
            "Export": {
                "Name": "CreateAccountWrapper"
            }
        },
        "Translate": {
            "Description": "Translate",
            "Value": {
                "Fn::GetAtt": [
                    "Translate",
                    "Arn"
                ]
            },
            "Export": {
                "Name": "Translate"
            }
        }
    }
}