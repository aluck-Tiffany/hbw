{"AWSTemplateFormatVersion":"2010-09-09","Description":"Image Bakery","Parameters":{"roleName":{"Type":"String","Default":"DatacomIntegration"},"externalId":{"Type":"String","Default":"DatacomIntegration"},"serviceAccountIds":{"Description":"AWS service account Ids seperated by comma","Type":"String","MinLength":12},"snsTopicArn":{"Description":"Image Bakery Sns Topic Arn in Datacom account","Type":"String"}},"Resources":{"snsTopicSubscription":{"Type":"AWS::SNS::Subscription","Properties":{"TopicArn":{"Ref":"snsTopicArn"},"Endpoint":{"Fn::GetAtt":["DewfordExecuteBakeryMachine","Arn"]},"Protocol":"lambda"}},"LambdaInvokePermission":{"Type":"AWS::Lambda::Permission","Properties":{"Action":"lambda:InvokeFunction","Principal":"sns.amazonaws.com","SourceArn":{"Ref":"snsTopicArn"},"FunctionName":{"Fn::GetAtt":["DewfordExecuteBakeryMachine","Arn"]}}},"FunctionRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]},"ManagedPolicyArns":["arn:aws:iam::aws:policy/AdministratorAccess"]}},"DewfordExecuteBakeryMachine":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nconst stateMachine = process.env.stateMachine;\r\nconst roleName = process.env.roleName;\r\nconst externalId = process.env.externalId;\r\nconst accountIds = process.env.serviceAccountIds;\r\n\r\nconst imageDeliveryToServiceAccount = (stepfunctions, accountId, event) => new Promise((resolve, reject) => {\r\n    let param = JSON.parse(JSON.stringify(event));\r\n\r\n    param.global.accountId = accountId;\r\n    param.global.roleName = roleName;\r\n    param.global.externalId = externalId;\r\n\r\n    stepfunctions.startExecution({\r\n        stateMachineArn: stateMachine,\r\n        input: JSON.stringify(param),\r\n    }).promise().then((data) => {\r\n        console.log(\"Return data: \" + JSON.stringify(data));\r\n    }).catch((err) => {\r\n        console.log(err);\r\n    });\r\n});\r\n\r\nexports.handler = (event, context, callback) => {\r\n    const promises = [];\r\n    const stepfunctions = new AWS.StepFunctions();\r\n    const instanceIds = [];\r\n\r\n    //console.log(JSON.stringify(event.Records[0].Sns.Message));\r\n    \r\n    accountIds.split(',').forEach((accountId) => {\r\n        console.log(`Deliver Image to service accountId ${accountId}`);\r\n        promises.push(imageDeliveryToServiceAccount(stepfunctions, accountId, JSON.parse(event.Records[0].Sns.Message)));\r\n    });\r\n\r\n    Promise.all(promises).then(() => {\r\n        callback(null);\r\n    }).catch((err) => {\r\n        callback(err);\r\n    });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Environment":{"Variables":{"serviceAccountIds":{"Ref":"serviceAccountIds"},"roleName":{"Ref":"roleName"},"externalId":{"Ref":"externalId"},"stateMachine":{"Ref":"StateMachine"}}},"Runtime":"nodejs6.10","Timeout":5}},"DewfordAssumeRole":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\nconst sts = new AWS.STS();\r\n\r\nexports.handler = (event, context, callback) => {\r\n    sts.assumeRole({\r\n        DurationSeconds: 3600,\r\n        ExternalId: event.global.externalId,\r\n        RoleArn: `arn:aws:iam::${event.global.accountId}:role/${event.global.roleName}`,\r\n        RoleSessionName: event.global.accountId + \"-ImageBakery\"\r\n    }).promise()\r\n        .then((data) => {\r\n            callback(null, {\r\n                accessKeyId: data.Credentials.AccessKeyId,\r\n                secretAccessKey: data.Credentials.SecretAccessKey,\r\n                sessionToken: data.Credentials.SessionToken\r\n            });\r\n        }).catch((err) => {\r\n            callback(err);\r\n        });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeSubnet":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n    const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n\r\n    ec2.describeTags({\r\n        Filters: [\r\n            {\r\n                Name: \"resource-type\",\r\n                Values: [\r\n                    \"subnet\"\r\n                ]\r\n            },\r\n            {\r\n                Name: \"key\",\r\n                Values: [\r\n                    \"aws:cloudformation:logical-id\"\r\n                ]\r\n            },\r\n            {\r\n                Name: \"value\",\r\n                Values: [\r\n                    \"RestrictedASubnet\"\r\n                ]\r\n            }\r\n        ],\r\n    }).promise()\r\n    .then((data) => {\r\n      callback(null, data.Tags[0].ResourceId);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeStackResource":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const cloudformation = new AWS.CloudFormation(event.global.credentials ? event.global.credentials : {});\r\n  cloudformation.describeStackResource({\r\n    LogicalResourceId: 'Key',\r\n    StackName: 'kms'\r\n  }).promise()\r\n    .then((data) => {\r\n      callback(null, data.StackResourceDetail.PhysicalResourceId);\r\n    })\r\n    .catch((err) => {\r\n      callback(err);\r\n    });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordGetKmsKeyArn":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n    const cloudformation = new AWS.CloudFormation(event.global.credentials ? event.global.credentials : {});\r\n    cloudformation.describeStacks({\r\n        StackName: 'kms'\r\n    }).promise()\r\n        .then((data) => {\r\n            let kmsKeyArn = null;\r\n            data.Stacks[0].Outputs.forEach((output) => {\r\n                if (output.OutputKey === 'KMSKeyARN') {\r\n                    kmsKeyArn = output.OutputValue;\r\n                }\r\n            });\r\n            callback(null, kmsKeyArn);\r\n        }).catch((err) => {\r\n            callback(err);\r\n        });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordRunInstance":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.runInstances({\r\n    ImageId: event.global.sourceImageId,\r\n    InstanceType: event.global.instanceType,\r\n    MaxCount: 1,\r\n    MinCount: 1,\r\n    SubnetId: event.global.subnetId,\r\n  }).promise()\r\n    .then((data) => {\r\n      const instanceIds = [];\r\n      console.log(JSON.stringify(data));\r\n      instanceIds.push(data.Instances[0].InstanceId)\r\n      callback(null, instanceIds);\r\n    })\r\n    .catch((err) => {\r\n      callback(err);\r\n    })\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordTagInstance":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n    const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n    ec2.createTags({\r\n        Resources: [\r\n            event.global.instanceIds[0],\r\n        ],\r\n        Tags: [\r\n            {\r\n                Key: 'Name',\r\n                Value: `image-${event.global.model}-${event.global.version}`,\r\n            },\r\n            {\r\n                Key: 'CostCentre',\r\n                Value: 'management',\r\n            }\r\n        ]\r\n    }).promise().then(() => {\r\n        callback(null, event);\r\n    }).catch((err) => {\r\n        callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordStopInstance":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.stopInstances({\r\n    InstanceIds: [\r\n      event.global.instanceIds[0],\r\n    ],\r\n  }).promise().then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordCreateImage":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.createImage({\r\n    InstanceId: event.global.instanceIds[0],\r\n    Name: `${event.global.model}-${event.global.version}`,\r\n  }).promise()\r\n    .then((data) => {\r\n      callback(null, data.ImageId);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeImageState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.describeImages({\r\n    ImageIds: [\r\n      event.global.imageId,\r\n    ],\r\n  }).promise()\r\n    .then((data) => {\r\n      callback(null, data.Images[0].State);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeEncryptedImageState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.describeImages({\r\n    ImageIds: [\r\n      event.global.encryptedImageId,\r\n    ],\r\n  }).promise()\r\n    .then((data) => {\r\n      callback(null, data.Images[0].State);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordCreateEncryptedSnapshotCopies":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nconst region = process.env.region;\r\n\r\nconst copySnapshot = (ec2, kmsKeyId, sourceSnapshot) =>\r\n  new Promise((resolve, reject) => {\r\n    ec2.copySnapshot({\r\n      SourceRegion: region,\r\n      SourceSnapshotId: sourceSnapshot.snapshotId,\r\n      Encrypted: true,\r\n      KmsKeyId: kmsKeyId,\r\n    }).promise()\r\n      .then((data) => {\r\n        resolve({\r\n          snapshotId: data.SnapshotId,\r\n          device: sourceSnapshot.device,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const promises = [];\r\n  event.global.sourceSnapshots.forEach((sourceSnapshot) => {\r\n    promises.push(copySnapshot(ec2, event.global.kmsKeyId, sourceSnapshot));\r\n  });\r\n  Promise.all(promises).then((snapshots) => {\r\n    callback(null, snapshots);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5,"Environment":{"Variables":{"region":{"Ref":"AWS::Region"}}}}},"DewfordDetachVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const promises = [];\r\n  event.local.volumes.forEach((volume) => {\r\n    promises.push(ec2.detachVolume({\r\n      VolumeId: volume.volumeId,\r\n    }).promise());\r\n  });\r\n  Promise.all(promises).then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.describeVolumes({\r\n    Filters: [\r\n      {\r\n        Name: 'attachment.instance-id',\r\n        Values: [\r\n          event.global.instanceIds[0],\r\n        ],\r\n      },\r\n    ],\r\n  }).promise()\r\n    .then((data) => {\r\n      const volumes = [];\r\n      data.Volumes.forEach((volume) => {\r\n        volumes.push({\r\n          volumeId: volume.VolumeId,\r\n          snapshotId: volume.SnapshotId,\r\n        });\r\n      });\r\n      callback(null, volumes);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeInstanceState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.describeInstances({\r\n    InstanceIds: [\r\n      event.global.instanceIds[0],\r\n    ],\r\n  }).promise().then((data) => {\r\n    callback(null, data.Reservations[0].Instances[0].State.Name);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDeleteVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const promises = [];\r\n  event.local.volumes.forEach((volume) => {\r\n    promises.push(ec2.deleteVolume({\r\n      VolumeId: volume.volumeId,\r\n    }).promise());\r\n  });\r\n  Promise.all(promises).then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeVolumesState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const volumeIds = event.local.volumes.reduce((reduced, volume) => {\r\n    reduced.push(volume.volumeId);\r\n    return reduced;\r\n  }, []);\r\n  ec2.describeVolumes({\r\n    VolumeIds: volumeIds,\r\n  }).promise()\r\n    .then((data) => {\r\n      const states = [];\r\n      data.Volumes.forEach((volume) => {\r\n        states.push(volume.State);\r\n      });\r\n      let volumeStates = 'processing';\r\n      if (states.every(state => state === 'available')) {\r\n        volumeStates = 'available';\r\n      }\r\n      callback(null, volumeStates);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeAttachmentsState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const volumeIds = event.local.volumes.reduce((reduced, volume) => {\r\n    reduced.push(volume.volumeId);\r\n    return reduced;\r\n  }, []);\r\n  ec2.describeVolumes({\r\n    VolumeIds: volumeIds,\r\n  }).promise()\r\n    .then((data) => {\r\n      const states = [];\r\n      data.Volumes.forEach((volume) => {\r\n        volume.Attachments.forEach((attachment) => {\r\n          states.push(attachment.State);\r\n        });\r\n      });\r\n      let attachmentStates = 'processing';\r\n      if (states.every(state => state === 'attached')) {\r\n        attachmentStates = 'attached';\r\n      }\r\n      if (states.every(state => state === 'detached')) {\r\n        attachmentStates = 'detached';\r\n      }\r\n      callback(null, attachmentStates);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordCreateVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nconst region = process.env.region;\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const promises = [];\r\n  var snapshots;\r\n\r\n  if ( typeof event.local != \"undefined\") {\r\n      snapshots = event.local.snapshots;\r\n  }\r\n  else {\r\n      snapshots =  event.global.sourceSnapshots;\r\n  }\r\n  snapshots.forEach((sourceSnapshot) => {\r\n    promises.push(ec2.createVolume({\r\n      AvailabilityZone: `${region}a`,\r\n      SnapshotId: sourceSnapshot.snapshotId,\r\n      VolumeType: 'gp2',\r\n    }).promise());\r\n  });\r\n  Promise.all(promises).then((datas) => {\r\n    const volumeIds = datas.reduce((reduced, data) => {\r\n      reduced.push({\r\n        volumeId: data.VolumeId,\r\n        snapshotId: data.SnapshotId,\r\n      });\r\n      return reduced;\r\n    }, []);\r\n    callback(null, volumeIds);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5,"Environment":{"Variables":{"region":{"Ref":"AWS::Region"}}}}},"DewfordClearLocal":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"exports.handler = (event, context, callback) => {\r\n  const cleanEvent = {};\r\n  cleanEvent.global = event.global;\r\n  callback(null, cleanEvent);\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordCreateEncryptedImage":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.createImage({\r\n    InstanceId: event.global.instanceIds[0],\r\n    Name: `${event.global.model}-${event.global.version}-encrypted`,\r\n  }).promise()\r\n    .then((data) => {\r\n      callback(null, data.ImageId);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordAttachEncryptedVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const snapshotDeviceMap = event.local.snapshots.reduce((map, snapshot) => {\r\n    map.set(snapshot.snapshotId, snapshot.device);\r\n    return map;\r\n  }, new Map());\r\n  const promises = [];\r\n  event.local.volumes.forEach((volume) => {\r\n    promises.push(ec2.attachVolume({\r\n      Device: snapshotDeviceMap.get(volume.snapshotId),\r\n      InstanceId: event.global.instanceIds[0],\r\n      VolumeId: volume.volumeId,\r\n    }).promise());\r\n  });\r\n  Promise.all(promises).then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordTerminateInstance":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  ec2.terminateInstances({\r\n    InstanceIds: event.global.instanceIds\r\n  }).promise().then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordAttachVolumes":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const snapshotDeviceMap = event.global.sourceSnapshots.reduce((map, snapshot) => {\r\n    map.set(snapshot.snapshotId, snapshot.device);\r\n    return map;\r\n  }, new Map());\r\n  const promises = [];\r\n  event.local.volumes.forEach((volume) => {\r\n    promises.push(ec2.attachVolume({\r\n      Device: snapshotDeviceMap.get(volume.snapshotId),\r\n      InstanceId: event.global.instanceIds[0],\r\n      VolumeId: volume.volumeId,\r\n    }).promise());\r\n  });\r\n  Promise.all(promises).then(() => {\r\n    callback(null, event);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordDescribeSnapshotState":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const ec2 = new AWS.EC2(event.global.credentials ? event.global.credentials : {});\r\n  const snapshotIds = event.local.snapshots.reduce((reduced, snapshot) => {\r\n    reduced.push(snapshot.snapshotId);\r\n    return reduced;\r\n  }, []);\r\n  ec2.describeSnapshots({\r\n    SnapshotIds: snapshotIds,\r\n  }).promise()\r\n    .then((data) => {\r\n      let snapshotStates = 'processing';\r\n      if (data.Snapshots.every(snapshot => snapshot.State === 'completed')) {\r\n        snapshotStates = 'completed';\r\n      }\r\n      callback(null, snapshotStates);\r\n    }).catch((err) => {\r\n      callback(err);\r\n    });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5}},"DewfordPublishSNS":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"const AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nconst region = process.env.region;\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const sns = new AWS.SNS(event.global.credentials ? event.global.credentials : {});\r\n\r\n  sns.publish({\r\n    Message: JSON.stringify({\r\n      imageId: event.global.imageId,\r\n      encryptedImageId: event.global.encryptedImageId,\r\n      model: event.global.model,\r\n      version: event.global.version,\r\n    }),\r\n    TopicArn: `arn:aws:sns:${region}:${event.global.accountId}:DatacomImages`,\r\n  }).promise().then((data) => {\r\n    callback(null, data.MessageId);\r\n  }).catch((err) => {\r\n    callback(err);\r\n  });\r\n};\r\n"},"Handler":"index.handler","MemorySize":128,"Role":{"Fn::GetAtt":["FunctionRole","Arn"]},"Runtime":"nodejs6.10","Timeout":5,"Environment":{"Variables":{"region":{"Ref":"AWS::Region"}}}}},"StateMachine":{"Type":"AWS::StepFunctions::StateMachine","Properties":{"DefinitionString":{"Fn::Sub":"{\r\n    \"Comment\": \"\",\r\n    \"StartAt\": \"AssumeRole\",\r\n    \"States\": {\r\n        \"AssumeRole\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordAssumeRole.Arn}\",\r\n            \"ResultPath\": \"$.global.credentials\",\r\n            \"Next\": \"DescribeSubnet\"\r\n        },\r\n        \"DescribeSubnet\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeSubnet.Arn}\",\r\n            \"ResultPath\": \"$.global.subnetId\",\r\n            \"Next\": \"DescribeKmsKeyArn\"\r\n        },\r\n        \"DescribeKmsKeyArn\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordGetKmsKeyArn.Arn}\",\r\n            \"ResultPath\": \"$.global.kmsKeyId\",\r\n            \"Next\": \"RunInstance\"\r\n        },\r\n        \"RunInstance\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordRunInstance.Arn}\",\r\n            \"ResultPath\": \"$.global.instanceIds\",\r\n            \"Next\": \"TagInstance\"\r\n        },\r\n        \"TagInstance\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordTagInstance.Arn}\",\r\n            \"Next\": \"RunInstanceState\"\r\n        },\r\n        \"RunInstanceState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeInstanceState.Arn}\",\r\n            \"ResultPath\": \"$.global.instanceState\",\r\n            \"Next\": \"RunInstanceDecide\"\r\n        },\r\n        \"RunInstanceDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.global.instanceState\",\r\n                    \"StringEquals\": \"running\",\r\n                    \"Next\": \"StopInstance\"\r\n                }\r\n            ],\r\n            \"Default\": \"RunInstanceWait\"\r\n        },\r\n        \"RunInstanceWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"RunInstanceState\"\r\n        },\r\n        \"StopInstance\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordStopInstance.Arn}\",\r\n            \"Next\": \"StopInstanceState\"\r\n        },\r\n        \"StopInstanceState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeInstanceState.Arn}\",\r\n            \"ResultPath\": \"$.global.instanceState\",\r\n            \"Next\": \"StopInstanceDecide\"\r\n        },\r\n        \"StopInstanceDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.global.instanceState\",\r\n                    \"StringEquals\": \"stopped\",\r\n                    \"Next\": \"DescribeVolumes\"\r\n                }\r\n            ],\r\n            \"Default\": \"StopInstanceWait\"\r\n        },\r\n        \"StopInstanceWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"StopInstanceState\"\r\n        },\r\n        \"DescribeVolumes\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeVolumes.Arn}\",\r\n            \"ResultPath\": \"$.local.volumes\",\r\n            \"Next\": \"DetachVolumes\"\r\n        },\r\n        \"DetachVolumes\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDetachVolumes.Arn}\",\r\n            \"Next\": \"DescribeAttachmentsState\"\r\n        },\r\n        \"DescribeAttachmentsState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeAttachmentsState.Arn}\",\r\n            \"ResultPath\": \"$.local.attachmentsState\",\r\n            \"Next\": \"AttachmentsStateDecide\"\r\n        },\r\n        \"AttachmentsStateDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.attachmentsState\",\r\n                    \"StringEquals\": \"detached\",\r\n                    \"Next\": \"DeleteVolumes\"\r\n                }\r\n            ],\r\n            \"Default\": \"AttachmentsStateWait\"\r\n        },\r\n        \"AttachmentsStateWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeAttachmentsState\"\r\n        },\r\n        \"DeleteVolumes\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDeleteVolumes.Arn}\",\r\n            \"Next\": \"ClearLocal\"\r\n        },\r\n        \"ClearLocal\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordClearLocal.Arn}\",\r\n            \"Next\": \"CreateVolumes\"\r\n        },\r\n        \"CreateVolumes\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordCreateVolumes.Arn}\",\r\n            \"ResultPath\": \"$.local.volumes\",\r\n            \"Next\": \"DescribeVolumesState\"\r\n        },\r\n        \"DescribeVolumesState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeVolumesState.Arn}\",\r\n            \"ResultPath\": \"$.local.volumesState\",\r\n            \"Next\": \"VolumesStateDecide\"\r\n        },\r\n        \"VolumesStateDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.volumesState\",\r\n                    \"StringEquals\": \"available\",\r\n                    \"Next\": \"AttachVolumes\"\r\n                }\r\n            ],\r\n            \"Default\": \"DescribeVolumesWait\"\r\n        },\r\n        \"DescribeVolumesWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeVolumesState\"\r\n        },\r\n        \"AttachVolumes\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordAttachVolumes.Arn}\",\r\n            \"Next\": \"DescribeAttachmentsState2\"\r\n        },\r\n        \"DescribeAttachmentsState2\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeAttachmentsState.Arn}\",\r\n            \"ResultPath\": \"$.local.attachmentsState\",\r\n            \"Next\": \"AttachmentsStateDecide2\"\r\n        },\r\n        \"AttachmentsStateDecide2\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.attachmentsState\",\r\n                    \"StringEquals\": \"attached\",\r\n                    \"Next\": \"CreateImage\"\r\n                }\r\n            ],\r\n            \"Default\": \"AttachmentsStateWait2\"\r\n        },\r\n        \"AttachmentsStateWait2\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeAttachmentsState2\"\r\n        },\r\n        \"CreateImage\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordCreateImage.Arn}\",\r\n            \"ResultPath\": \"$.global.imageId\",\r\n            \"Next\": \"DescribeImageState\"\r\n        },\r\n        \"DescribeImageState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeImageState.Arn}\",\r\n            \"ResultPath\": \"$.local.imageState\",\r\n            \"Next\": \"ImageStateDecide\"\r\n        },\r\n        \"ImageStateDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.imageState\",\r\n                    \"StringEquals\": \"available\",\r\n                    \"Next\": \"DetachVolumes3\"\r\n                }\r\n            ],\r\n            \"Default\": \"ImageStateWait\"\r\n        },\r\n        \"ImageStateWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeImageState\"\r\n        },\r\n        \"DetachVolumes3\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDetachVolumes.Arn}\",\r\n            \"Next\": \"DescribeAttachmentsState3\"\r\n        },\r\n        \"DescribeAttachmentsState3\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeAttachmentsState.Arn}\",\r\n            \"ResultPath\": \"$.local.attachmentsState\",\r\n            \"Next\": \"AttachmentsStateDecide3\"\r\n        },\r\n        \"AttachmentsStateDecide3\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.attachmentsState\",\r\n                    \"StringEquals\": \"detached\",\r\n                    \"Next\": \"DeleteVolumes3\"\r\n                }\r\n            ],\r\n            \"Default\": \"AttachmentsStateWait3\"\r\n        },\r\n        \"AttachmentsStateWait3\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeAttachmentsState3\"\r\n        },\r\n        \"DeleteVolumes3\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDeleteVolumes.Arn}\",\r\n            \"Next\": \"ClearLocal2\"\r\n        },\r\n        \"ClearLocal2\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordClearLocal.Arn}\",\r\n            \"Next\": \"CopySnapshots\"\r\n        },\r\n        \"CopySnapshots\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordCreateEncryptedSnapshotCopies.Arn}\",\r\n            \"ResultPath\": \"$.local.snapshots\",\r\n            \"Next\": \"DescribeSnapshotState\"\r\n        },\r\n        \"DescribeSnapshotState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeSnapshotState.Arn}\",\r\n            \"ResultPath\": \"$.local.snapshotStates\",\r\n            \"Next\": \"SnapshotStateDecide\"\r\n        },\r\n        \"SnapshotStateDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.snapshotStates\",\r\n                    \"StringEquals\": \"completed\",\r\n                    \"Next\": \"CreateVolumes5\"\r\n                }\r\n            ],\r\n            \"Default\": \"SnapshotStateWait\"\r\n        },\r\n        \"SnapshotStateWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeSnapshotState\"\r\n        },\r\n        \"CreateVolumes5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordCreateVolumes.Arn}\",\r\n            \"ResultPath\": \"$.local.volumes\",\r\n            \"Next\": \"DescribeVolumesState5\"\r\n        },\r\n        \"DescribeVolumesState5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeVolumesState.Arn}\",\r\n            \"ResultPath\": \"$.local.volumesState\",\r\n            \"Next\": \"VolumesStateDecide5\"\r\n        },\r\n        \"VolumesStateDecide5\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.volumesState\",\r\n                    \"StringEquals\": \"available\",\r\n                    \"Next\": \"AttachVolumes5\"\r\n                }\r\n            ],\r\n            \"Default\": \"DescribeVolumesWait5\"\r\n        },\r\n        \"DescribeVolumesWait5\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeVolumesState5\"\r\n        },\r\n        \"AttachVolumes5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordAttachEncryptedVolumes.Arn}\",\r\n            \"Next\": \"DescribeAttachmentsState5\"\r\n        },\r\n        \"DescribeAttachmentsState5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeAttachmentsState.Arn}\",\r\n            \"ResultPath\": \"$.local.attachmentsState\",\r\n            \"Next\": \"AttachmentsStateDecide5\"\r\n        },\r\n        \"AttachmentsStateDecide5\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.attachmentsState\",\r\n                    \"StringEquals\": \"attached\",\r\n                    \"Next\": \"CreateImage5\"\r\n                }\r\n            ],\r\n            \"Default\": \"AttachmentsStateWait5\"\r\n        },\r\n        \"AttachmentsStateWait5\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeAttachmentsState5\"\r\n        },\r\n        \"CreateImage5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordCreateEncryptedImage.Arn}\",\r\n            \"ResultPath\": \"$.global.encryptedImageId\",\r\n            \"Next\": \"DescribeImageState5\"\r\n        },\r\n        \"DescribeImageState5\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeEncryptedImageState.Arn}\",\r\n            \"ResultPath\": \"$.local.imageState\",\r\n            \"Next\": \"ImageStateDecide5\"\r\n        },\r\n        \"ImageStateDecide5\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.imageState\",\r\n                    \"StringEquals\": \"available\",\r\n                    \"Next\": \"DetachVolumes6\"\r\n                }\r\n            ],\r\n            \"Default\": \"ImageStateWait5\"\r\n        },\r\n        \"ImageStateWait5\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeImageState5\"\r\n        },\r\n        \"DetachVolumes6\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDetachVolumes.Arn}\",\r\n            \"Next\": \"DescribeAttachmentsState6\"\r\n        },\r\n        \"DescribeAttachmentsState6\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeAttachmentsState.Arn}\",\r\n            \"ResultPath\": \"$.local.attachmentsState\",\r\n            \"Next\": \"AttachmentsStateDecide6\"\r\n        },\r\n        \"AttachmentsStateDecide6\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.local.attachmentsState\",\r\n                    \"StringEquals\": \"detached\",\r\n                    \"Next\": \"DeleteVolumes6\"\r\n                }\r\n            ],\r\n            \"Default\": \"AttachmentsStateWait6\"\r\n        },\r\n        \"AttachmentsStateWait6\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"DescribeAttachmentsState6\"\r\n        },\r\n        \"DeleteVolumes6\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDeleteVolumes.Arn}\",\r\n            \"Next\": \"ClearLocal6\"\r\n        },\r\n        \"ClearLocal6\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordClearLocal.Arn}\",\r\n            \"Next\": \"TerminateInstance\"\r\n        },\r\n        \"TerminateInstance\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordTerminateInstance.Arn}\",\r\n            \"Next\": \"TerminateInstanceState\"\r\n        },\r\n        \"TerminateInstanceState\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordDescribeInstanceState.Arn}\",\r\n            \"ResultPath\": \"$.global.instanceState\",\r\n            \"Next\": \"TerminateInstanceDecide\"\r\n        },\r\n        \"TerminateInstanceDecide\": {\r\n            \"Type\": \"Choice\",\r\n            \"Choices\": [\r\n                {\r\n                    \"Variable\": \"$.global.instanceState\",\r\n                    \"StringEquals\": \"terminated\",\r\n                    \"Next\": \"PublishSNS\"\r\n                }\r\n            ],\r\n            \"Default\": \"TerminateInstanceWait\"\r\n        },\r\n        \"TerminateInstanceWait\": {\r\n            \"Type\": \"Wait\",\r\n            \"Seconds\": 5,\r\n            \"Next\": \"TerminateInstanceState\"\r\n        },\r\n        \"PublishSNS\": {\r\n            \"Type\": \"Task\",\r\n            \"Resource\": \"${DewfordPublishSNS.Arn}\",\r\n            \"End\": true\r\n        }\r\n    }\r\n}"},"RoleArn":{"Fn::GetAtt":["StateMachineRole","Arn"]}}},"StateMachineRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":{"Fn::Sub":"states.${AWS::Region}.amazonaws.com"}},"Action":"sts:AssumeRole"}]},"Policies":[{"PolicyName":{"Fn::Sub":"${AWS::StackName}"},"PolicyDocument":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["lambda:InvokeFunction"],"Resource":"*"}]}}]}}}}