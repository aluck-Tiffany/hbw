{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "SSM API Gateway",
  "Parameters": {
    "Route53ZoneName": {
      "Type": "String",
      "Default": "demo.hcs.datacom.com.au"
    },
    "Route53HostedZone": {
      "Type": "String",
      "Default": "Z1LNMPGULJSD7T"
    },
    "CertificateArn": {
      "Type": "String"
    }
  },
  "Resources": {
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Ec2-list-role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "ec2:DescribeInstanceStatus"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "ds:CreateComputer",
                    "ds:DescribeDirectories"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:AbortMultipartUpload",
                    "s3:ListMultipartUploadParts",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "ActivationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "\n",
                "const AWS = require('aws-sdk'); \n",
                "const ssm = new AWS.SSM(); \n",
                "exports.handler = (event, context, callback) => { \n",
                "    const instanceName = event.queryStringParameters.instanceName; \n",
                "    const params = { \n",
                "      IamRole: `",
                {
                  "Ref": "InstanceRole"
                },
                "` , \n",
                "      DefaultInstanceName: instanceName, \n",
                "    }; \n",
                "    ssm.createActivation(params).promise() \n",
                "    .then((data) => { \n",
                "        const response = { \n",
                "        statusCode: '200', \n",
                "        body: JSON.stringify(data) \n",
                "    }; \n",
                "    console.log(JSON.stringify(response)); \n",
                "        callback(null, response); \n",
                "    }) \n",
                "    .catch((err) => { \n",
                "        console.log(JSON.stringify(err)); \n",
                "        callback(err); \n",
                "    }); \n",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ActivationFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10"
      }
    },
    "ActivationFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Ec2-list-role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "iam:PassRole",
                    "ssm:CreateActivation"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ActivationFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ActivationFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGateway"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "TagFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "'use strict';",
                "",
                "const AWS = require('aws-sdk');",
                "const ssm = new AWS.SSM();",
                "exports.handler = (event, context, callback) => {",
                "    console.log(JSON.stringify(event));",
                "    const body = JSON.parse(event.body)",
                "    const params = {",
                "        ResourceId: body.managedInstanceId,",
                "        ResourceType: 'ManagedInstance',",
                "        Tags: [{",
                "            Key: 'ssm',",
                "            Value: body.os",
                "        }]",
                "    };",
                "    ssm.addTagsToResource(params).promise()",
                "        .then(() => { callback(null, {",
                "        statusCode: \"200\",",
                "    }); })",
                "        .catch((err) => { callback(err); })",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "TagFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10"
      }
    },
    "TagFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Ec2-list-role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ssm:GetDocument",
                    "ssm:DescribeInstanceInformation",
                    "ssm:AddTagsToResource"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "TagFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TagFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGateway"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "DependsOn": [
        "ActivationFunction",
        "TagFunction"
      ],
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-apigateway"
            ]
          ]
        },
        "Description": "ApiGateway",
        "Parameters": {
          "endpointConfigurationTypes": "REGIONAL"
        }
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "ApiStage": {
      "DependsOn": [
        "ApiGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "StageName": "latest"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ApiMethodActivate",
        "ApiMethodTag"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGateway"
        }
      }
    },
    "ApiResourceActivate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "activate"
      }
    },
    "ApiMethodActivate": {
      "DependsOn": "ActivationFunctionPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ActivationFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                  "  \"name\": \"$input.params('name')\"",
                  "}"
                ]
              ]
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {
          "Ref": "ApiResourceActivate"
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "ApiResourceTag": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "tag"
      }
    },
    "ApiMethodTag": {
      "DependsOn": "TagFunctionPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TagFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                  "  \"name\": \"$input.params('name')\"",
                  "}"
                ]
              ]
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {
          "Ref": "ApiResourceTag"
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "APIDomainName": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            "",
            [
              "ssm.",
              {
                "Ref": "Route53ZoneName"
              }
            ]
          ]
        },
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "CertificateArn": {
          "Ref": "CertificateArn"
        }
      }
    },
    "BasePathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "BasePath": "latest",
        "DomainName": {
          "Fn::Join": [
            "",
            [
              "ssm.",
              {
                "Ref": "Route53ZoneName"
              }
            ]
          ]
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "Stage": {
          "Ref": "ApiStage"
        }
      }
    },
    "Route53DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "Route53HostedZone"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "ssm.",
              {
                "Ref": "Route53ZoneName"
              },
              "."
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "APIDomainName",
              "DistributionDomainName"
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGateway"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com"
          ]
        ]
      }
    }
  }
}