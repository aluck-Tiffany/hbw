{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CIS AWS Benchmark Level 1 (Scored)",
  "Resources": {
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CISGenerateCredentialReportFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM;exports.handler=function(e,i,n){iam.generateCredentialReport(function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CISGenerateCredentialReportRule": {
      "DependsOn": "CISGenerateCredentialReportFunction",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(15 minutes)",
        "Targets": [
          {
            "Id": "CISGenerateCredentialReportRule",
            "Arn": {
              "Fn::GetAtt": [
                "CISGenerateCredentialReportFunction",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CISGenerateCredentialReportPermission": {
      "DependsOn": "CISGenerateCredentialReportRule",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CISGenerateCredentialReportFunction",
            "Arn"
          ]
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "CISGenerateCredentialReportRule",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com"
      }
    },
    "CIS0101Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,n,t){iam.getCredentialReport(function(n,i){if(n)t(JSON.stringify(n));else{var o=!0;Buffer.from(i.Content,\"base64\").toString().split(\"\\n\").forEach(function(e){var n=e.split(\",\");if(\"<root_account>\"===n[0]){console.log(n[4]);var t=new Date(n[4]),i=new Date,a=new Date;a.setDate(i.getDate()-30),t>a&&(o=!1)}});var a={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:o?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(a,function(e,n){e?t(JSON.stringify(e)):t(null,JSON.stringify(n))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0101Permission": {
      "DependsOn": "CIS0101Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0101Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0101ConfigRule": {
      "DependsOn": "CIS0101Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-01",
        "Description": "1.1 Avoid the use of the \"root\" account (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0101Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0102Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getCredentialReport(function(i,r){if(i)n(JSON.stringify(i));else{var t=[];Buffer.from(r.Content,\"base64\").toString().split(\"\\n\").forEach(function(e,i){var n=e.split(\",\");if(\"<root_account>\"!==n[0]&&i>0){var r={ComplianceResourceType:\"AWS::IAM::User\",ComplianceResourceId:n[0],OrderingTimestamp:new Date};\"true\"===n[3]&&\"true\"!==n[7]?r.ComplianceType=\"NON_COMPLIANT\":r.ComplianceType=\"COMPLIANT\",t.push(r)}});var o={Evaluations:t,ResultToken:e.resultToken};configService.putEvaluations(o,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0102Permission": {
      "DependsOn": "CIS0102Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0102Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0102ConfigRule": {
      "DependsOn": "CIS0102Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-02",
        "Description": "1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0102Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0103Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,t,n){iam.getCredentialReport(function(t,a){if(t)n(JSON.stringify(t));else{var i=[];Buffer.from(a.Content,\"base64\").toString().split(\"\\n\").forEach(function(e,t){var n=e.split(\",\");if(\"<root_account>\"!==n[0]&&t>0){var a=!0;if(\"true\"===n[3]){var r=new Date(n[4]),o=new Date,s=new Date;s.setDate(o.getDate()-90),r<s&&(a=!1)}if(\"true\"===n[8]){var u=new Date(n[10]),f=new Date,c=new Date;c.setDate(f.getDate()-90),u<c&&(a=!1)}if(\"true\"===n[15]){var D=new Date(n[10]),l=new Date,v=new Date;v.setDate(l.getDate()-90),D<v&&(a=!1)}var w={ComplianceResourceType:\"AWS::IAM::User\",ComplianceResourceId:n[0],ComplianceType:a?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date};i.push(w)}});var r={Evaluations:i,ResultToken:e.resultToken};configService.putEvaluations(r,function(e,t){e?n(JSON.stringify(e)):n(null,JSON.stringify(t))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0103Permission": {
      "DependsOn": "CIS0103Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0103Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0103ConfigRule": {
      "DependsOn": "CIS0103Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-03",
        "Description": "1.3 Ensure credentials unused for 90 days or greater are disabled (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0103Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0104Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,t,n){iam.getCredentialReport(function(t,a){if(t)n(JSON.stringify(t));else{var i=[];Buffer.from(a.Content,\"base64\").toString().split(\"\\n\").forEach(function(e,t){var n=e.split(\",\");if(\"<root_account>\"!==n[0]&&t>0){var a=!0;if(\"true\"===n[8]){var r=new Date(n[9]),o=new Date,s=new Date;s.setDate(o.getDate()-90),r<s&&(a=!1)}if(\"true\"===n[15]){var u=new Date(n[16]),c=new Date,f=new Date;f.setDate(c.getDate()-90),u<f&&(a=!1)}var l={ComplianceResourceType:\"AWS::IAM::User\",ComplianceResourceId:n[0],ComplianceType:a?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date};i.push(l)}});var r={Evaluations:i,ResultToken:e.resultToken};configService.putEvaluations(r,function(e,t){e?n(JSON.stringify(e)):n(null,JSON.stringify(t))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0104Permission": {
      "DependsOn": "CIS0104Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0104Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0104ConfigRule": {
      "DependsOn": "CIS0104Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-04",
        "Description": "1.4 Ensure access keys are rotated every 90 days or less (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0104Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0105Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,c){if(i)n(JSON.stringify(i));else{var r={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:c.PasswordPolicy.RequireUppercaseCharacters?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(r,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0105Permission": {
      "DependsOn": "CIS0105Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0105Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0105ConfigRule": {
      "DependsOn": "CIS0105Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-05",
        "Description": "1.5 Ensure IAM password policy requires at least one uppercase letter (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0105Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0106Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,c){if(i)n(JSON.stringify(i));else{var o={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:c.PasswordPolicy.RequireLowercaseCharacters?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(o,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0106Permission": {
      "DependsOn": "CIS0106Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0106Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0106ConfigRule": {
      "DependsOn": "CIS0106Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-06",
        "Description": "1.6 Ensure IAM password policy require at least one lowercase letter (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0106Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0107Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,o){if(i)n(JSON.stringify(i));else{var c={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:o.PasswordPolicy.RequireSymbols?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(c,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0107Permission": {
      "DependsOn": "CIS0107Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0107Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0107ConfigRule": {
      "DependsOn": "CIS0107Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-07",
        "Description": "1.7 Ensure IAM password policy require at least one symbol (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0107Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0108Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,o){if(i)n(JSON.stringify(i));else{var c={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:o.PasswordPolicy.RequireNumbers?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(c,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0108Permission": {
      "DependsOn": "CIS0108Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0108Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0108ConfigRule": {
      "DependsOn": "CIS0108Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-08",
        "Description": "1.8 Ensure IAM password policy require at least one number (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0108Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0109Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,o){if(i)n(JSON.stringify(i));else{var c=o.PasswordPolicy.MinimumPasswordLength>=14,s={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:c?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(s,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0109Permission": {
      "DependsOn": "CIS0109Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0109Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0109ConfigRule": {
      "DependsOn": "CIS0109Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-09",
        "Description": "1.9 Ensure IAM password policy requires minimum length of 14 or greater (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0109Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0110Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,o){if(i)n(JSON.stringify(i));else{var s=o.PasswordPolicy.PasswordReusePrevention>=24,c={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:s?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(c,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0110Permission": {
      "DependsOn": "CIS0110Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0110Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0110ConfigRule": {
      "DependsOn": "CIS0110Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-10",
        "Description": "1.10 Ensure IAM password policy prevents password reuse (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0110Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0111Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,i,n){iam.getAccountPasswordPolicy({},function(i,o){if(i)n(JSON.stringify(i));else{var c=o.PasswordPolicy.MaxPasswordAge<=90,s={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:c?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(s,function(e,i){e?n(JSON.stringify(e)):n(null,JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0111Permission": {
      "DependsOn": "CIS0111Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0111Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0111ConfigRule": {
      "DependsOn": "CIS0111Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-11",
        "Description": "1.11 Ensure IAM password policy expires passwords within 90 days or less (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0111Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0112Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,n,i){iam.getCredentialReport(function(n,t){if(n)i(JSON.stringify(n));else{var r=!0;Buffer.from(t.Content,\"base64\").toString().split(\"\\n\").forEach(function(e){var n=e.split(\",\");\"<root_account>\"===n[0]&&(\"true\"!==n[8]&&\"true\"!==n[15]||(r=!1))});var o={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:r?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(o,function(e,n){e?i(JSON.stringify(e)):i(null,JSON.stringify(n))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0112Permission": {
      "DependsOn": "CIS0112Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0112Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0112ConfigRule": {
      "DependsOn": "CIS0112Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-12",
        "Description": "1.12 Ensure no root account access key exists (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0112Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0113Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService;exports.handler=function(e,n,i){iam.getAccountSummary(function(n,c){if(n)i(JSON.stringify(n));else{var t=1===c.SummaryMap.AccountMFAEnabled,a={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:t?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:e.resultToken};configService.putEvaluations(a,function(e,n){e?i(JSON.stringify(e)):i(null,JSON.stringify(n))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0113Permission": {
      "DependsOn": "CIS0113Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0113Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0113ConfigRule": {
      "DependsOn": "CIS0113Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-13",
        "Description": "1.13 Ensure MFA is enabled for the \"root\" account (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0113Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0116Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),iam=new AWS.IAM,configService=new AWS.ConfigService,listAttachedUserPolicies=function(e){return new Promise(function(i,n){var s={UserName:e};iam.listAttachedUserPolicies(s,function(e,s){e?n(e):i(s.AttachedPolicies.length>0)})})},listUserPolicies=function(e){return new Promise(function(i,n){var s={UserName:e};iam.listUserPolicies(s,function(e,s){e?n(e):i(s.PolicyNames.length>0)})})},getPoliciesForUser=function(e){return new Promise(function(i,n){var s=[];s.push(listAttachedUserPolicies(e.UserName)),s.push(listUserPolicies(e.UserName)),Promise.all(s).then(function(n){var s=!0;n.forEach(function(e){e&&(s=!1)}),i({user:e,compliant:s})}).catch(function(e){n(e)})})};exports.handler=function(e,i,n){iam.listUsers(function(i,s){if(i)n(JSON.stringify(i));else{var r=[];s.Users.forEach(function(e){r.push(getPoliciesForUser(e))}),Promise.all(r).then(function(i){var s=[];i.forEach(function(e){var i={ComplianceResourceType:\"AWS::IAM::User\",ComplianceResourceId:e.user.UserName,OrderingTimestamp:new Date};e.compliant?i.ComplianceType=\"COMPLIANT\":i.ComplianceType=\"NON_COMPLIANT\",s.push(i)});var r={Evaluations:s,ResultToken:e.resultToken};configService.putEvaluations(r,function(e,i){n(e?e:i)})}).catch(function(e){n(JSON.stringify(e))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0116Permission": {
      "DependsOn": "CIS0116Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0116Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0116ConfigRule": {
      "DependsOn": "CIS0116Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-01-16",
        "Description": "1.16 Ensure IAM policies are attached only to groups or roles (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0116Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0201Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),cloudtrail=new AWS.CloudTrail,configService=new AWS.ConfigService,getTrailCompliance=function(i){return new Promise(function(n,e){var r=!1,t={Name:i.TrailARN};cloudtrail.getTrailStatus(t,function(t,o){t?e(t):(o.IsLogging&&i.IsMultiRegionTrail&&(r=!0),n(r))})})};exports.handler=function(i,n,e){cloudtrail.describeTrails({},function(n,r){if(n)e(JSON.stringify(n));else{var t=[];r.trailList.forEach(function(i){t.push(getTrailCompliance(i))}),Promise.all(t).then(function(n){var r=!1;n.forEach(function(i){i&&(r=i)});var t={Evaluations:[{ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:i.accountId,ComplianceType:r?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}],ResultToken:i.resultToken};configService.putEvaluations(t,function(i,n){i?e(JSON.stringify(i)):e(null,JSON.stringify(n))})}).catch(function(i){e(JSON.stringify(i))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0201Permission": {
      "DependsOn": "CIS0201Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0201Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0201ConfigRule": {
      "DependsOn": "CIS0201Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-02-01",
        "Description": "2.1 Ensure CloudTrail is enabled in all regions (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0201Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0205Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),ec2=new AWS.EC2,configService=new AWS.ConfigService,describeConfigurationRecorderStatus=function(e){return new Promise(function(n,o){e.describeConfigurationRecorderStatus({},function(e,i){e?o(e):n(i)})})},describeConfigurationRecorders=function(e){return new Promise(function(n,o){e.describeConfigurationRecorders({},function(e,i){e?o(e):n(i)})})},getConfigComplianceForRegion=function(e){return new Promise(function(n,o){var i=new AWS.ConfigService({region:e}),r=[];r.push(describeConfigurationRecorders(i)),r.push(describeConfigurationRecorderStatus(i)),Promise.all(r).then(function(o){var i=!1,r=!1,t=o.filter(filterOnKey(\"ConfigurationRecorders\"))[0],c=o.filter(filterOnKey(\"ConfigurationRecordersStatus\"))[0],u=t.ConfigurationRecorders.reduce(function(e,n){return c.ConfigurationRecordersStatus.forEach(function(o){n.name===o.name&&o.recording&&e.push(n)}),e},[]);u.length>0&&(i=!0,u.forEach(function(e){e.recordingGroup.includeGlobalResourceTypes&&(r=!0)})),n({region:e,compliant:i,global:r})}).catch(function(e){o(e)})})},filterOnKey=function(e){return function(n){return n[e]}};exports.handler=function(e,n,o){ec2.describeRegions({},function(n,i){if(n)o(JSON.stringify(n));else{var r=[];i.Regions.forEach(function(e){r.push(getConfigComplianceForRegion(e.RegionName))}),Promise.all(r).then(function(n){var i=[],r=!1;n.forEach(function(e){i.push({ComplianceResourceType:\"AWS::Config::ConfigurationRecorder\",ComplianceResourceId:e.region,ComplianceType:e.compliant?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date}),e.global&&(r=!0)}),i.push({ComplianceResourceType:\"AWS::::Account\",ComplianceResourceId:e.accountId,ComplianceType:r?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date,Annotation:\"Global resources\"});var t={Evaluations:i,ResultToken:e.resultToken};configService.putEvaluations(t,function(e,n){e?o(JSON.stringify(e)):o(null,JSON.stringify(n))})}).catch(function(e){o(JSON.stringify(e))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0205Permission": {
      "DependsOn": "CIS0205Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0205Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0205ConfigRule": {
      "DependsOn": "CIS0205Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-02-05",
        "Description": "2.5 Ensure AWS Config is enabled in all regions (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0205Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0401Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),ec2=new AWS.EC2,configService=new AWS.ConfigService;exports.handler=function(e,r,i){ec2.describeSecurityGroups({},function(r,n){if(r)i(JSON.stringify(r));else{var o=[];n.SecurityGroups.forEach(function(e){var r=!0;e.IpPermissions.forEach(function(e){(22-e.FromPort)*(22-e.ToPort)<=0&&(e.IpRanges.forEach(function(e){\"0.0.0.0/0\"===e.CidrIp&&(r=!1)}),e.Ipv6Ranges.forEach(function(e){\"::/0\"===e.CidrIpv6&&(r=!1)}))});var i={ComplianceResourceType:\"AWS::EC2::SecurityGroup\",ComplianceResourceId:e.GroupId,ComplianceType:r?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date};o.push(i)});var c={Evaluations:o,ResultToken:e.resultToken};configService.putEvaluations(c,function(e,r){e?i(JSON.stringify(e)):i(null,JSON.stringify(r))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0401Permission": {
      "DependsOn": "CIS0401Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0401Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0401ConfigRule": {
      "DependsOn": "CIS0401Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-04-01",
        "Description": "4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22 (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0401Function",
              "Arn"
            ]
          }
        }
      }
    },
    "CIS0402Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\"use strict\";var AWS=require(\"aws-sdk\"),ec2=new AWS.EC2,configService=new AWS.ConfigService;exports.handler=function(e,r,i){ec2.describeSecurityGroups({},function(r,n){if(r)i(JSON.stringify(r));else{var o=[];n.SecurityGroups.forEach(function(e){var r=!0;e.IpPermissions.forEach(function(e){(3389-e.FromPort)*(3389-e.ToPort)<=0&&(e.IpRanges.forEach(function(e){\"0.0.0.0/0\"===e.CidrIp&&(r=!1)}),e.Ipv6Ranges.forEach(function(e){\"::/0\"===e.CidrIpv6&&(r=!1)}))});var i={ComplianceResourceType:\"AWS::EC2::SecurityGroup\",ComplianceResourceId:e.GroupId,ComplianceType:r?\"COMPLIANT\":\"NON_COMPLIANT\",OrderingTimestamp:new Date};o.push(i)});var c={Evaluations:o,ResultToken:e.resultToken};configService.putEvaluations(c,function(e,r){e?i(JSON.stringify(e)):i(null,JSON.stringify(r))})}})};"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        }
      }
    },
    "CIS0402Permission": {
      "DependsOn": "CIS0402Function",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CIS0402Function",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "config.amazonaws.com"
      }
    },
    "CIS0402ConfigRule": {
      "DependsOn": "CIS0402Permission",
      "Type": "AWS::Config::ConfigRule",
      "Properties": {
        "ConfigRuleName": "CIS-04-02",
        "Description": "4.2 Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 (Scored)",
        "Source": {
          "Owner": "CUSTOM_LAMBDA",
          "SourceDetails": [
            {
              "EventSource": "aws.config",
              "MaximumExecutionFrequency": "One_Hour",
              "MessageType": "ScheduledNotification"
            }
          ],
          "SourceIdentifier": {
            "Fn::GetAtt": [
              "CIS0402Function",
              "Arn"
            ]
          }
        }
      }
    }
  }
}
